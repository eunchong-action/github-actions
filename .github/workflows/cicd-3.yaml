name: cicd-3
on:
  push:
    paths:
    - 'my-app/**'
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    types: [opened, synchronize, closed] #PR이 open되거나 동기화 될 때 CI실행
    branches: [dev, master]
    paths:
    - 'my-app/**'

jobs:
  test: #CI를 위해 실행되는 job 
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: checkout #github 코드를 가져온다. 
      uses: actions/checkout@v4
    - name: setup-node #버전 18의 Node.js 설치 
      uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install dependencies #npm ci로 dependency 설치 
      run: |
        cd my-app
        npm ci 
    - name: npm build
      run: |
        cd my-app
        npm run build

  set-environment:
    if: github.event.pull_request.merged == true || github.ref_type == 'tag'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
    - name: set env
      id: set-env
      run: |
        if [[ ${{ github.ref_type }} == "tag" ]]; then
          echo "environment=qa" >> $GITHUB_OUTPUT
          exit 0
        fi

        if [[ ${{ github.ref_type }} == "branch" ]]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
          if [[ ${{ github.base_ref }} == "master" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi
        fi
    - name: check env
      run: echo ${{ steps.set-env.outputs.environment }}


  image-build: #PR이 merge되면 실행되는 job, 즉 CD 단계에서 실행된다. 
    if: github.event.pull_request.merged == true 
    needs: [set-environment]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
    - name: checkout the code #github 코드를 가져온다. 
      uses: actions/checkout@v4
    - name: Configure AWS Credentials #AWS 권한을 얻기위해 AWS action 사용 
      id: credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: # AWS에 access하기 위한 정보 전달 
        aws-region: ${{ vars.AWS_REGION }} #리전 
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} #역할 
    - name: Login to Amazon ECR  
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: docker build & push
      run: |
        docker build -f Dockerfile --tag ${{ secrets.REGISTRY}}/${{ vars.REPOSITORY }}:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}


  deploy: #CD단계에서 실행하는 job 
    runs-on: ubuntu-latest
    needs: [set-environment, image-build] #image build job이 성공한 다음 실행되어야 한다. 
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: Configure AWS Credentials
      id: credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: setup helm
      uses: azure/setup-helm@v3
      with:
        version: v3.11.1
    - name: access kubernetes #AWS EKS에 접근하는 커맨드 사용 
      run: |
        aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }}
    - name: deploy #helm 커맨드를 사용해서 접근한 쿠버네티스 클러스터에 배포한다. 
      id: status
      run: |
        helm upgrade --install my-app kubernetes/my-app --create-namespace --namespace my-app-${{ vars.SUFFIX }} \
        --set image.tag=${{ github.sha }} \
        --set image.repository=${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }} 
    - name: notify
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "message",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Environment : ${{ matrix.environment }}, Deploy Result : ${{ steps.status.outcome }}, Repository : ${{ github.repository }}."
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  create-pr:
    if: needs.set-environment.outputs.environment == 'qa'
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: gh auth login
      run: |
        echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | gh auth login --with-token
    - name: create branch
      run: |
        git checkout -b release/${{ github.ref_name }}
        git push origin release/${{ github.ref_name }}
    - name: create pr
      run: |
       gh pr create --base master --head release/${{ github.ref_name }} --title "release/${{ github.ref_name}} -> master" --body "release pr"